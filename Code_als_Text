import motor
import color_sensor
import color
import time
from hub import port

# --- KONFIGURATION ---
my_piece = -1# -1 = Rot, 1 = Gelb (KI-Spieler)
opponent_piece = -my_piece# Automatisch gesetzt

bewegung_weite_e = 95    # Grad pro Zeilenschritt (Motor E)
bewegung_weite_d = 72    # Grad pro Spaltenwechsel (Motor D)
bewegung_weite_f = -72    # Grad pro Spaltenwechsel (Motor F, gegenlÃ¤ufig zu D)
pause_motor_e = 1        # Wartezeit nach Zeilenbewegung
pause_motor_e_back = 3    # Wartezeit nach RÃ¼ckfÃ¼hrung Motor E
pause_motor_d = 1        # Wartezeit nach Spaltenwechsel
spielfeld_breite = 7        # 7 Spalten
spielfeld_hoehe = 6        # 6 Zeilen

spielfeld = [[None for _ in range(spielfeld_breite)] for _ in range(spielfeld_hoehe)]

def update_spielfeld(zeile, spalte, erkannte_farbe):
    if erkannte_farbe in (color.RED, color.PURPLE, color.MAGENTA):
        spielfeld[zeile][spalte] = -1
    elif erkannte_farbe in (color.YELLOW, color.WHITE, color.GREEN):
        spielfeld[zeile][spalte] = 1
    else:
        spielfeld[zeile][spalte] = 0

def print_spielfeld(spielfeld):
    symbol_map = {-1: "ðŸ”´", 1: "ðŸŸ¡", 0: "âšª", None: "âšª"}
    print("\nAktuelles Spielfeld (unten rechts = [0][0]):")
    for zeile_idx in reversed(range(spielfeld_hoehe)):
        zeile = spielfeld[zeile_idx]
        print(" ".join(symbol_map.get(feld, "?") for feld in zeile))

# --- SCAN-LOGIK ---
for spalte in range(spielfeld_breite - 1, -1, -1):
    leere_erkannt = False
    for zeile in range(spielfeld_hoehe):
        if zeile > 0:
            motor.run_for_degrees(port.E, bewegung_weite_e, 120)
            time.sleep(pause_motor_e)
        erkannte_farbe = color_sensor.color(port.B)
        matrix_zeile = zeile
        matrix_spalte = spielfeld_breite - 1 - spalte# Umrechnung auf Matrix-Spalte

        if erkannte_farbe is None or erkannte_farbe == color.UNKNOWN:
            for z in range(zeile, spielfeld_hoehe):
                update_spielfeld(z, matrix_spalte, 0)
            if zeile > 0:
                motor.run_for_degrees(port.E, -bewegung_weite_e * zeile, 500)
                time.sleep(pause_motor_e_back)
            leere_erkannt = True
            break

        update_spielfeld(matrix_zeile, matrix_spalte, erkannte_farbe)
        print("Matrix-Eintrag: Zeile {}, Spalte {}: {}".format(
            matrix_zeile, matrix_spalte,
            "Rot" if spielfeld[matrix_zeile][matrix_spalte] == -1
            else "Gelb" if spielfeld[matrix_zeile][matrix_spalte] == 1
            else "Leer"))

    if not leere_erkannt:
        motor.run_for_degrees(port.E, -bewegung_weite_e * (spielfeld_hoehe - 1), 500)
        time.sleep(pause_motor_e_back)

    if spalte > 0:
        motor.run_for_degrees(port.D, bewegung_weite_d, 100)
        motor.run_for_degrees(port.F, -bewegung_weite_d, 100)# Korrigierte Richtung fÃ¼r F
        time.sleep(pause_motor_d)

# Nach dem Scan steht der Roboter auf PHYSISCHER Spalte 0 (ganz links)

# --- ALGORITHMUS-FUNKTIONEN ---
def is_valid_location(board, col):
    return board[spielfeld_hoehe-1][col] == 0

def get_next_open_row(board, col):
    for r in range(spielfeld_hoehe):
        if board[r][col] == 0:
            return r
    return None

def winning_move(board, piece):
    # Horizontal
    for c in range(spielfeld_breite-3):
        for r in range(spielfeld_hoehe):
            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:
                return True
    # Vertikal
    for c in range(spielfeld_breite):
        for r in range(spielfeld_hoehe-3):
            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
                return True
    # Diagonalen
    for c in range(spielfeld_breite-3):
        for r in range(spielfeld_hoehe-3):
            if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:
                return True
        for r in range(3, spielfeld_hoehe):
            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
                return True
    return False

def evaluate_window(window, player):
    opp_player = opponent_piece if player == my_piece else my_piece
    score = 0
    if window.count(player) == 4:
        score += 100
    elif window.count(player) == 3 and window.count(0) == 1:
        score += 5
    elif window.count(player) == 2 and window.count(0) == 2:
        score += 2
    if window.count(opp_player) == 3 and window.count(0) == 1:
        score -= 4
    return score

def evaluate(board):
    score = 0
    # Zentrum bevorzugen
    center_array = [board[r][spielfeld_breite//2] for r in range(spielfeld_hoehe)]
    center_count = center_array.count(my_piece)
    score += center_count * 3

    # Horizontal
    for r in range(spielfeld_hoehe):
        row_array = [board[r][c] for c in range(spielfeld_breite)]
        for c in range(spielfeld_breite - 3):
            window = row_array[c:c+4]
            score += evaluate_window(window, my_piece)
            score -= evaluate_window(window, opponent_piece)

    # Vertikal
    for c in range(spielfeld_breite):
        col_array = [board[r][c] for r in range(spielfeld_hoehe)]
        for r in range(spielfeld_hoehe - 3):
            window = col_array[r:r+4]
            score += evaluate_window(window, my_piece)
            score -= evaluate_window(window, opponent_piece)

    # Diagonal /
    for r in range(spielfeld_hoehe - 3):
        for c in range(spielfeld_breite - 3):
            window = [board[r+i][c+i] for i in range(4)]
            score += evaluate_window(window, my_piece)
            score -= evaluate_window(window, opponent_piece)

    # Diagonal \
    for r in range(3, spielfeld_hoehe):
        for c in range(spielfeld_breite - 3):
            window = [board[r-i][c+i] for i in range(4)]
            score += evaluate_window(window, my_piece)
            score -= evaluate_window(window, opponent_piece)

    return score

def alpha_beta(board, depth, alpha, beta, maximizing_player):
    valid_locations = [col for col in range(spielfeld_breite) if is_valid_location(board, col)]
    terminal = winning_move(board, my_piece) or winning_move(board, opponent_piece) or len(valid_locations) == 0

    if depth == 0 or terminal:
        if terminal:
            if winning_move(board, my_piece): return (None, 1000000)
            elif winning_move(board, opponent_piece): return (None, -1000000)
            else: return (None, 0)
        else:
            return (None, evaluate(board))

    if maximizing_player:
        value = -float('inf')
        best_col = valid_locations[0]
        for col in valid_locations:
            row = get_next_open_row(board, col)
            board_copy = [r[:] for r in board]
            board_copy[row][col] = my_piece
            new_score = alpha_beta(board_copy, depth-1, alpha, beta, False)[1]
            if new_score > value:
                value = new_score
                best_col = col
            alpha = max(alpha, value)
            if alpha >= beta:
                break
        return best_col, value
    else:
        value = float('inf')
        best_col = valid_locations[0]
        for col in valid_locations:
            row = get_next_open_row(board, col)
            board_copy = [r[:] for r in board]
            board_copy[row][col] = opponent_piece
            new_score = alpha_beta(board_copy, depth-1, alpha, beta, True)[1]
            if new_score < value:
                value = new_score
                best_col = col
            beta = min(beta, value)
            if beta <= alpha:
                break
        return best_col, value

# --- HAUPTPROGRAMM ---
# Konvertiere None zu 0 fÃ¼r den Algorithmus
spielfeld_numeric = [[0 if x is None else x for x in row] for row in spielfeld]

# Berechne optimalen Zug
best_col, _ = alpha_beta(
    spielfeld_numeric,
    depth=5,
    alpha=-float('inf'),
    beta=float('inf'),
    maximizing_player=(my_piece == 1)
)

best_row = get_next_open_row(spielfeld_numeric, best_col)
farbe = "Rot" if my_piece == -1 else "Gelb"

print("\nOptimale Position fÃ¼r {}:".format(farbe))
print("Spalte: {}, Zeile: {}".format(best_col, best_row))
print_spielfeld(spielfeld)

# --- ROBOTERSTEUERUNG ZUR ZIELSPALTE ---
physische_ziel_spalte = spielfeld_breite - 1 - best_col# Umrechnung

# Fahre zur Zielspalte (RECHTS)
motor.run_for_degrees(port.D, -bewegung_weite_d * physische_ziel_spalte, 100)
motor.run_for_degrees(port.F, bewegung_weite_d * physische_ziel_spalte, 100)
time.sleep(pause_motor_d * 4)

# Stein einwerfen
motor.run_for_degrees(port.A, -360, 300)
time.sleep(3)

# ZurÃ¼ck zur Startposition (RECHTS, Spalte 0)
motor.run_for_degrees(port.D, -bewegung_weite_d * best_col, 100)# D: RECHTS
motor.run_for_degrees(port.F, bewegung_weite_d * best_col, 100)# F: LINKS
time.sleep(pause_motor_d)